{"version":3,"sources":["admin.js","toggle-sub-task-completion.js"],"names":["$","toggleParentTaskCompletion","$repeater","find","length","parent","first","addClass","removeClass","calculateParentTaskProgress","$parentTask","$subTasks","progress","$subTaskCompletions","$parentTaskCompletion","each","index","row","parseInt","val","overallProgress","Math","ceil","floor","addRemoveSubTaskEvent","attachAddRemoveEvents","on","this","closest","setTimeout","document","ready","repeater","event","acf","add_action","element","data","jQuery"],"mappings":"AAAA,cCAA,SAAYA,GAuDX,QAASC,GAA4BC,GAG/BA,EAAUC,KAAM,oCAAqCC,OAEzDF,EAAUG,SAASF,KAAM,wEAAyEG,QAAQC,SAAU,UAKpHL,EAAUG,SAASF,KAAM,wEAAyEG,QAAQE,YAAa,UAezH,QAASC,GAA6BC,EAAaC,GAElD,GAAIC,GAAW,EACdC,EAAsBF,EAAUR,KAAM,wGACtCW,EAAwBJ,EAAYP,KAAM,wEAAyEG,QAAQH,KAAM,SAElIU,GAAoBE,KAAM,SAAUC,EAAOC,GAE1CL,GAAYM,SAAUlB,EAAGiB,GAAMd,KAAM,UAAWgB,QAIjD,IAAIC,GAAkBC,KAAKC,KAAMV,EAAWC,EAAoBT,OAEzDgB,GAAkB,EAAM,EAEvBA,EAAkB,IAAQ,IAGhCA,EAAsD,EAApCC,KAAKE,MAAOH,EAAkB,IAQjDA,EAAqD,EAAnCC,KAAKC,KAAMF,EAAkB,GAIhDN,EAAsBK,IAAKC,GAa5B,QAASI,GAAuBd,EAAaC,GAE5CV,EAA4BU,GAGvBA,EAAUR,KAAM,oCAAqCC,OAEzDK,EAA6BC,EAAaC,GAM1CD,EAAYP,KAAM,wEAAyEG,QAAQH,KAAM,UAAWgB,IAAK,GAa3H,QAASM,KAERzB,EAAG,4PAA6P0B,GAAI,QAAS,WAE5Q,GAAIf,GAAYX,EAAG2B,MAAOC,QAAS,uHAClClB,EAAcC,EAAUiB,QAAS,mCAGzBC,YAAY,WAEpBL,EAAuBd,EAAaC,GAGpCc,KAEE,SAnKLzB,EAAG8B,UAAWC,MAAO,WAEpB/B,EAAG,uHAAwHe,KAAM,SAAUC,EAAOgB,GAEjJ/B,EAA4BD,EAAGgC,IAE1BhC,EAAGgC,GAAW7B,KAAM,oCAAqCC,QAE7DK,EAA6BT,EAAGgC,GAAWJ,QAAS,oCAAsC5B,EAAGgC,MAM/FhC,EAAG,2NAA4N0B,GAAI,SAAU,SAAUO,GAEtP,GAAItB,GAAYX,EAAG2B,MAAOC,QAAS,uHAClClB,EAAcC,EAAUiB,QAAS,mCAElCnB,GAA6BC,EAAaC,KAI3Cc,IAI+B,mBAAnBS,KAAIC,YAEfD,IAAIC,WAAY,SAAU,SAAUC,GAEnC,GAAIzB,GAAYX,EAAGoC,GAAUR,QAAS,aAEtC,IAAiC,qBAA5BjB,EAAU0B,KAAM,OAArB,CAEA,GAAI3B,GAAcC,EAAUiB,QAAS,6BAErCJ,GAAuBd,EAAaC,SAoInC2B","file":"admin.js","sourcesContent":["'use strict';\n\n(function ($) {\n\n\t$(document).ready(function () {\n\n\t\t$('.sub_field.field_type-repeater[data-field_key=\"psp_st_sub_tasks\"], .acf-field-repeater[data-key=\"psp_st_sub_tasks\"]').each(function (index, repeater) {\n\n\t\t\ttoggleParentTaskCompletion($(repeater));\n\n\t\t\tif ($(repeater).find('.row, .acf-row:not( .acf-clone )').length) {\n\n\t\t\t\tcalculateParentTaskProgress($(repeater).closest('.row, .acf-row:not( .acf-clone )'), $(repeater));\n\t\t\t}\n\t\t});\n\n\t\t$('.sub_field.field_type-repeater[data-field_key=\"psp_st_sub_tasks\"] .row .sub_field[data-field_name=\"status\"], .acf-field-repeater[data-key=\"psp_st_sub_tasks\"] .acf-row:not( .acf-clone ) .acf-field[data-name=\"status\"]').on('change', function (event) {\n\n\t\t\tvar $subTasks = $(this).closest('.sub_field.field_type-repeater[data-field_key=\"psp_st_sub_tasks\"], .acf-field-repeater[data-key=\"psp_st_sub_tasks\"]'),\n\t\t\t    $parentTask = $subTasks.closest('.row, .acf-row:not( .acf-clone )');\n\n\t\t\tcalculateParentTaskProgress($parentTask, $subTasks);\n\t\t});\n\n\t\tattachAddRemoveEvents();\n\n\t\t// ACF 5 only, since ACF 5 hides removal behind a confirm dialog\n\t\t// ACF 5 also gives us some nice events\n\t\tif (typeof acf.add_action !== 'undefined') {\n\n\t\t\tacf.add_action('change', function (element) {\n\n\t\t\t\tvar $subTasks = $(element).closest('.acf-field');\n\n\t\t\t\tif ($subTasks.data('key') !== 'psp_st_sub_tasks') return;\n\n\t\t\t\tvar $parentTask = $subTasks.closest('.acf-row:not( .acf-clone )');\n\n\t\t\t\taddRemoveSubTaskEvent($parentTask, $subTasks);\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n  * Toggle visibility of the Parent Task Completion\n  * \n  * @param\t\t{object} $repeater jQuery DOM Object for the Sub Task Repeater\n  *                            \n  * @since\t\t{{VERSION}}\n  * @return\t\tvoid\n  */\n\tfunction toggleParentTaskCompletion($repeater) {\n\n\t\t// If there are rows, hide Parent Progress\n\t\tif ($repeater.find('.row, .acf-row:not( .acf-clone )').length) {\n\n\t\t\t$repeater.parent().find('.sub_field[data-field_name=\"status\"], .acf-field[data-name=\"status\"]').first().addClass('hidden');\n\t\t} else {\n\n\t\t\t$repeater.parent().find('.sub_field[data-field_name=\"status\"], .acf-field[data-name=\"status\"]').first().removeClass('hidden');\n\t\t}\n\t}\n\n\t/**\n  * Update the hidden Completion value for the Parent Task\n  * \n  * @param {object} $parentTask jQuery DOM Object for the Parent Task\n  * @param {object} $subTasks   jQuery DOM Object for the Sub Task Repeater\n  *                             \n  * @since\t\t{{VERSION}}\n  * @return\t\tvoid\n  */\n\tfunction calculateParentTaskProgress($parentTask, $subTasks) {\n\n\t\tvar progress = 0,\n\t\t    $subTaskCompletions = $subTasks.find('.row .sub_field[data-field_name=\"status\"], .acf-row:not( .acf-clone ) .acf-field[data-name=\"status\"]'),\n\t\t    $parentTaskCompletion = $parentTask.find('.sub_field[data-field_name=\"status\"], .acf-field[data-name=\"status\"]').first().find('select');\n\n\t\t$subTaskCompletions.each(function (index, row) {\n\n\t\t\tprogress += parseInt($(row).find('select').val());\n\t\t});\n\n\t\tvar overallProgress = Math.ceil(progress / $subTaskCompletions.length);\n\n\t\tif (overallProgress % 5 < 3) {\n\n\t\t\tif (overallProgress % 5 !== 0) {\n\n\t\t\t\t// Round down to nearest multiple of 5\n\t\t\t\toverallProgress = Math.floor(overallProgress / 5) * 5;\n\t\t\t}\n\t\t} else {\n\n\t\t\t// Round up to nearest multiple of 5\n\t\t\toverallProgress = Math.ceil(overallProgress / 5) * 5;\n\t\t}\n\n\t\t$parentTaskCompletion.val(overallProgress);\n\t}\n\n\t/**\n  * On Add/Remove Sub Task, recalculate Parent Task Completion and hide/show the Parent Task Completion\n  * \n  * @param {object} $parentTask jQuery DOM Object for the Parent Task\n  * @param {object} $subTasks   jQuery DOM Object for the Sub Task Repeater\n  *                             \n  * @since\t\t{{VERSION}}\n  * @return\t\tvoid\n  */\n\tfunction addRemoveSubTaskEvent($parentTask, $subTasks) {\n\n\t\ttoggleParentTaskCompletion($subTasks);\n\n\t\t// If there are still subtasks, recalculate\n\t\tif ($subTasks.find('.row, .acf-row:not( .acf-clone )').length) {\n\n\t\t\tcalculateParentTaskProgress($parentTask, $subTasks);\n\t\t} else {\n\n\t\t\t// Set Parent Completion value to 0\n\t\t\t$parentTask.find('.sub_field[data-field_name=\"status\"], .acf-field[data-name=\"status\"]').first().find('select').val(0);\n\t\t}\n\t}\n\n\t/**\n  * Attaches the Add/Remove Events for Sub Tasks\n  * Remove Events are handled separately for ACF 5 and do not need to be re-attached when the Repeater changes\n  * \n  * @since\t\t{{VERSION}}\n  * @return\t\tvoid\n  */\n\tfunction attachAddRemoveEvents() {\n\n\t\t$('tr[data-field_key=\"psp_st_sub_tasks\"] .add-row-end.acf-button, tr[data-field_key=\"psp_st_sub_tasks\"] .acf-button-add, tr[data-field_key=\"psp_st_sub_tasks\"] .acf-button-remove, .acf-field-repeater[data-key=\"psp_st_sub_tasks\"] a[data-event=\"add-row\"]').on('click', function () {\n\n\t\t\tvar $subTasks = $(this).closest('.sub_field.field_type-repeater[data-field_key=\"psp_st_sub_tasks\"], .acf-field-repeater[data-key=\"psp_st_sub_tasks\"]'),\n\t\t\t    $parentTask = $subTasks.closest('.row, .acf-row:not( .acf-clone )');\n\n\t\t\t// Wait for transitions\n\t\t\tsetTimeout(function () {\n\n\t\t\t\taddRemoveSubTaskEvent($parentTask, $subTasks);\n\n\t\t\t\t// Reattach events\n\t\t\t\tattachAddRemoveEvents();\n\t\t\t}, '500');\n\t\t});\n\t}\n})(jQuery);","( function( $ ) {\n\t\n\t$( document ).ready( function() {\n\t\t\n\t\t$( '.sub_field.field_type-repeater[data-field_key=\"psp_st_sub_tasks\"], .acf-field-repeater[data-key=\"psp_st_sub_tasks\"]' ).each( function( index, repeater ) {\n\t\t\t\n\t\t\ttoggleParentTaskCompletion( $( repeater ) );\n\t\t\t\n\t\t\tif ( $( repeater ).find( '.row, .acf-row:not( .acf-clone )' ).length ) {\n\t\t\t\n\t\t\t\tcalculateParentTaskProgress( $( repeater ).closest( '.row, .acf-row:not( .acf-clone )' ), $( repeater ) );\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} );\n\t\t\n\t\t$( '.sub_field.field_type-repeater[data-field_key=\"psp_st_sub_tasks\"] .row .sub_field[data-field_name=\"status\"], .acf-field-repeater[data-key=\"psp_st_sub_tasks\"] .acf-row:not( .acf-clone ) .acf-field[data-name=\"status\"]' ).on( 'change', function( event ) {\n\t\t\t\n\t\t\tvar $subTasks = $( this ).closest( '.sub_field.field_type-repeater[data-field_key=\"psp_st_sub_tasks\"], .acf-field-repeater[data-key=\"psp_st_sub_tasks\"]' ),\n\t\t\t\t$parentTask = $subTasks.closest( '.row, .acf-row:not( .acf-clone )' );\n\t\t\t\n\t\t\tcalculateParentTaskProgress( $parentTask, $subTasks );\n\t\t\t\n\t\t} );\n\t\t\n\t\tattachAddRemoveEvents();\n\t\t\n\t\t// ACF 5 only, since ACF 5 hides removal behind a confirm dialog\n\t\t// ACF 5 also gives us some nice events\n\t\tif ( typeof acf.add_action !== 'undefined' ) {\n\t\t\n\t\t\tacf.add_action( 'change', function( element ) {\n\n\t\t\t\tvar $subTasks = $( element ).closest( '.acf-field' );\n\t\t\t\t\n\t\t\t\tif ( $subTasks.data( 'key' ) !== 'psp_st_sub_tasks' ) return;\n\t\t\t\t\n\t\t\t\tvar $parentTask = $subTasks.closest( '.acf-row:not( .acf-clone )' );\n\t\t\t\t\n\t\t\t\taddRemoveSubTaskEvent( $parentTask, $subTasks );\n\n\t\t\t} );\n\t\t\t\n\t\t}\n\t\t\n\t} );\n\t\n\t/**\n\t * Toggle visibility of the Parent Task Completion\n\t * \n\t * @param\t\t{object} $repeater jQuery DOM Object for the Sub Task Repeater\n\t *                            \n\t * @since\t\t{{VERSION}}\n\t * @return\t\tvoid\n\t */\n\tfunction toggleParentTaskCompletion( $repeater ) {\n\t\t\n\t\t// If there are rows, hide Parent Progress\n\t\tif ( $repeater.find( '.row, .acf-row:not( .acf-clone )' ).length ) {\n\t\t\t\n\t\t\t$repeater.parent().find( '.sub_field[data-field_name=\"status\"], .acf-field[data-name=\"status\"]' ).first().addClass( 'hidden' );\n\t\t\t\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\t$repeater.parent().find( '.sub_field[data-field_name=\"status\"], .acf-field[data-name=\"status\"]' ).first().removeClass( 'hidden' );\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Update the hidden Completion value for the Parent Task\n\t * \n\t * @param {object} $parentTask jQuery DOM Object for the Parent Task\n\t * @param {object} $subTasks   jQuery DOM Object for the Sub Task Repeater\n\t *                             \n\t * @since\t\t{{VERSION}}\n\t * @return\t\tvoid\n\t */\n\tfunction calculateParentTaskProgress( $parentTask, $subTasks ) {\n\t\t\n\t\tvar progress = 0,\n\t\t\t$subTaskCompletions = $subTasks.find( '.row .sub_field[data-field_name=\"status\"], .acf-row:not( .acf-clone ) .acf-field[data-name=\"status\"]' ),\n\t\t\t$parentTaskCompletion = $parentTask.find( '.sub_field[data-field_name=\"status\"], .acf-field[data-name=\"status\"]' ).first().find( 'select' );\n\t\t\n\t\t$subTaskCompletions.each( function( index, row ) {\n\t\t\t\n\t\t\tprogress += parseInt( $( row ).find( 'select' ).val() );\n\t\t\t\n\t\t} );\n\t\t\n\t\tvar overallProgress = Math.ceil( progress / $subTaskCompletions.length );\n\t\t\n\t\tif ( ( overallProgress % 5 ) < 3 ) {\n\t\t\t\n\t\t\tif ( ( overallProgress % 5 ) !== 0 ) {\n\t\t\t\t\n\t\t\t\t// Round down to nearest multiple of 5\n\t\t\t\toverallProgress = Math.floor( overallProgress / 5 ) * 5;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\t// Round up to nearest multiple of 5\n\t\t\toverallProgress = Math.ceil( overallProgress / 5 ) * 5;\n\t\t\t\n\t\t}\n\t\t\n\t\t$parentTaskCompletion.val( overallProgress );\n\t\t\n\t}\n\t\n\t/**\n\t * On Add/Remove Sub Task, recalculate Parent Task Completion and hide/show the Parent Task Completion\n\t * \n\t * @param {object} $parentTask jQuery DOM Object for the Parent Task\n\t * @param {object} $subTasks   jQuery DOM Object for the Sub Task Repeater\n\t *                             \n\t * @since\t\t{{VERSION}}\n\t * @return\t\tvoid\n\t */\n\tfunction addRemoveSubTaskEvent( $parentTask, $subTasks ) {\n\t\t\n\t\ttoggleParentTaskCompletion( $subTasks );\n\t\t\t\t\n\t\t// If there are still subtasks, recalculate\n\t\tif ( $subTasks.find( '.row, .acf-row:not( .acf-clone )' ).length ) {\n\n\t\t\tcalculateParentTaskProgress( $parentTask, $subTasks );\n\n\t\t}\n\t\telse {\n\n\t\t\t// Set Parent Completion value to 0\n\t\t\t$parentTask.find( '.sub_field[data-field_name=\"status\"], .acf-field[data-name=\"status\"]' ).first().find( 'select' ).val( 0 );\n\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Attaches the Add/Remove Events for Sub Tasks\n\t * Remove Events are handled separately for ACF 5 and do not need to be re-attached when the Repeater changes\n\t * \n\t * @since\t\t{{VERSION}}\n\t * @return\t\tvoid\n\t */\n\tfunction attachAddRemoveEvents() {\n\t\t\n\t\t$( 'tr[data-field_key=\"psp_st_sub_tasks\"] .add-row-end.acf-button, tr[data-field_key=\"psp_st_sub_tasks\"] .acf-button-add, tr[data-field_key=\"psp_st_sub_tasks\"] .acf-button-remove, .acf-field-repeater[data-key=\"psp_st_sub_tasks\"] a[data-event=\"add-row\"]' ).on( 'click', function() {\n\t\t\t\n\t\t\tvar $subTasks = $( this ).closest( '.sub_field.field_type-repeater[data-field_key=\"psp_st_sub_tasks\"], .acf-field-repeater[data-key=\"psp_st_sub_tasks\"]' ),\n\t\t\t\t$parentTask = $subTasks.closest( '.row, .acf-row:not( .acf-clone )' );\n            \n\t\t\t// Wait for transitions\n            setTimeout( function() {\n\t\t\t\t\n\t\t\t\taddRemoveSubTaskEvent( $parentTask, $subTasks );\n\t\t\t\t\n\t\t\t\t// Reattach events\n\t\t\t\tattachAddRemoveEvents();\n\t\t\t\t\n\t\t\t}, '500' );\n            \n        } );\n\t\t\n\t}\n\t\n} )( jQuery );"]}